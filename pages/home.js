import Image from "next/image";
import Head from "next/head";
import styled from "styled-components";
import { useState, useEffect } from "react";
import HomePageLayout from "../components/Layout/HomePageLayout";
import CodeLinesComp from "../components/codelines/CodeLinesComp";
import { useContext } from "react";
import { CalculateHeightContext } from "../context/index";
import Icon from "../common/icons/icons";

export default function Home() {
  const { elementRef } = useContext(CalculateHeightContext);

  return (
    <div>
      <Head>
        <title>Home | Tech-Portfolio</title>
        <meta name="description" content="Generated by TheLastGoodMan" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <HomePageContainer>
      </HomePageContainer> */}
      <HomePageLayout>
        <StyledDiv ref={elementRef}>
          <CodeLinesComp />
          <GithubPage />
        </StyledDiv>
      </HomePageLayout>
    </div>
  );
}

//styled components for HomePage

const StyledDiv = styled.div`
  height: 100%;
  width: 100%;
  display: flex;
  background-color: #bfbfbf;
`;

// const HomePageContainer = styled.main`
//   max-height: 100vh;
//   padding: 0 0.5rem;
//   width: 100%;
//   margin: 20px auto;
//   overflow: hidden;
// `;

// const gitHubUrl = "https://api.github.com/users/duffigoogle";

const GithubPage = ({ userData, repoData }) => {
  const [user, setUserData] = useState([]);

  // const getGitHubUserWithFetch = async () => {
  //   const response = await fetch(gitHubUrl);
  //   const userData = await response.json();
  //   setUserData(userData);
  //   console.log(userData);
  // };

  // useEffect(() => {
  //   getGitHubUserWithFetch();
  // }, []);

  return (
    <>
      <h1>Loading</h1>
      <div>
        <div>
          {/* <Image src={user.avatar_url}
            className=""
            alt={userData.login}
            width={50}
            height={50}
          /> */}
          <h3>{user.login}</h3>
        </div>
        <div>
          <h3>{user.public_repos} repos</h3>
        </div>
        <div>
          <h3>{user.followers} followers</h3>
        </div>
      </div>

      {/* <h2>6 Latest Updated Repositories</h2>
      <div>
        {repos.map((repoData) => (
          <RepoCard key={repoData.id} repoData={repoData} />
        ))}
      </div> */}
    </>
  );
};

export async function getStaticProps() {
  const gitHubUrl = `https://api.github.com/users/${process.env.NEXT_PUBLIC_GITHUB_USERNAME}`;
  const gitHubUserRepoUrl = `https://api.github.com/users/${process.env.NEXT_PUBLIC_GITHUB_USERNAME}/repos?sort=created_at&per_page=6`;

  const getGitHubUserWithFetch = async () => {
    const response = await fetch(gitHubUrl);
    const userData = await response.json();
    setUserData(userData);
    console.log(userData);
  };

  const getGitHubUserRepoWithFetch = async () => {
    const response = await fetch(gitHubUserRepoUrl);
    const repoData = await response.json();
    setUserData(repoData);
    console.log(repoData);
  };

  useEffect(() => {
    getGitHubUserWithFetch();
    getGitHubUserRepoWithFetch();
  }, [getGitHubUserRepoWithFetch, getGitHubUserWithFetch]);

  return {
    props: { title: "GitHub", repoData, userData }, // will be passed to the page component as props
    revalidate: 10,
  };
}

const RepoCard = ({ repoData }) => {
  const [repo, setRepoData] = useState([]);

  return (
    <div>
      <div>
        <h3>{repoData.name}</h3>
        <p>{repoData.description}</p>
      </div>
      <div>
        <div>
          <div>
            {/* <WatchIcon /> {repoData.watchers} */}
            <Icon name="WatchIcon" size={18} /> {repoData.watchers}
          </div>
          <div>
            {/* <ForkIcon /> {repoData.forks} */}
            <Icon name="ForkIcon" size={18} /> {repoData.forks}
          </div>
          <div>
            {/* <StarIcon /> {repoData.stargazers_count} */}
            <Icon name="StartIcon" size={18} /> {repoData.forks}
          </div>
        </div>
        {/* <div>
          <a href={repoData.html_url} target="_blank" rel="noopener">
            <GithubIcon height={20} width={20} />
          </a>
          {repo.homepage && (
            <a href={repoData.homepage} target="_blank" rel="noopener">
              <LinkIcon height={20} width={20} />
            </a>
          )}
        </div> */}
      </div>
    </div>
  );
};
